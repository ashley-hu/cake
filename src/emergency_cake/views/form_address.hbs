
<div class="container">
	<form>
		<div class="row">
			<div class="col-md-2 mb-4">
			</div>
			<div class="col-md-8 mb-4">
				<label for="autocomplete">Delivery Address</label>
				<input id="autocomplete" class="form-control" placeholder="Please enter delivery address" onFocus="geolocate()" type="text"></input>
			</div>
			<div class="col-md-2 mb-4">
			</div>
		</div>

		<div class="row">
			<!-- <div class="col-md-2">Street address</div> -->
			<div class="col-md-2 mb-1">
			</div>
			<div class="col-md-2 mb-1">
				<label for="street_number">Street #</label>
				<input class="form-control" id="street_number" disabled="true"></input>
			</div>
			<div class="col-md-6 mb-1">
				<label for="route">Route</label>
				<input class="form-control" id="route" disabled="true"></input>
			</div>
			<div class="col-md-2 mb-1">
			</div>
		</div>

		<div class="row">
			<!-- <div class="col-md-2">City</div> -->

			<!-- Note: Selection of address components in this example is typical.
			 You may need to adjust it for the locations relevant to your app. See
			 https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform
			-->
			<div class="col-md-2 mb-1">
			</div>
			<div class="col-md-4 mb-1">
				<label for="locality">City</label>
				<input class="form-control" id="locality" disabled="true"></input>
			</div>
			<!-- <div class="col-md-2">State</div> -->
			<div class="col-md-2 mb-1">
				<label for="administrative_area_level_1">State</label>
				<input class="form-control" id="administrative_area_level_1" disabled="true"></input>
			</div>
			<!-- <div class="col-md-2">Zip code</div> -->
			<div class="col-md-2 mb-1">
				<label for="postal_code">Zip Code</label>
				<input class="form-control" id="postal_code" disabled="true"></input>
			</div>
			<div class="col-md-2 mb-1">
			</div>
		</div>

		<div class="row">
			<!-- <div class="col-md-2 mb-3">Country</div> -->
			<div class="col-md-2 mb-4">
			</div>
			<div class="col-md-4 mb-4">
				<label for="country">Country</label>
				<input class="form-control" id="country" disabled="true"></input>
			</div>
			<div class="col-md-2 mb-4">
			</div>
			<!--<div class="col-md-2 mb-4">
				<label for="submission"></label>
				<button type="submit" class="btn btn-success form-control" id="submission">Submit</button>
			</div> -->
			<div class="col-md-2 mb-4">
			</div>
		</div>
	</form>

	<div class="row">
		<div class="col-md-2 mb-4">
			</div>
		<div class="col-md-2 mb-4">
			<button type="button" id="yelpButton" class="btn btn-secondary btn-lg" disabled>Yelp Button</button>
		</div>
		<div class="col-md-2 mb-4">
			<p id="yelpDisplay"></p>
		</div>
	</div>
</div>


<script>
	// This example displays an address form, using the autocomplete feature
	// of the Google Places API to help users fill in the information.

	// This example requires the Places library. Include the libraries=places
	// parameter when you first load the API. For example:
	// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

	var placeSearch, autocomplete;
	var componentForm = {
		street_number: 'short_name',
		route: 'long_name',
		locality: 'long_name',
		administrative_area_level_1: 'short_name',
		country: 'long_name',
		postal_code: 'short_name'
	};
	let completeAddress, cakeStore;

	function initAutocomplete() {
		// Create the autocomplete object, restricting the search to geographical
		// location types.
		autocomplete = new google.maps.places.Autocomplete(
			/** @type {!HTMLInputElement} */(document.getElementById('autocomplete')), {types: ['geocode']});

		// When the user selects an address from the dropdown, populate the address
		// fields in the form.
		autocomplete.addListener('place_changed', fillInAddress);
	}

	function fillInAddress() {
		// Get the place details from the autocomplete object.
		var place = autocomplete.getPlace();

		for (var component in componentForm) {
			document.getElementById(component).value = '';
			document.getElementById(component).disabled = false;
		}

		// Get each component of the address from the place details
		// and fill the corresponding field on the form.
		for (var i = 0; i < place.address_components.length; i++) {
			var addressType = place.address_components[i].types[0];
			// for places such as Brooklyn
			if (addressType === "sublocality_level_1"){
				addressType = "locality";
			}
			if (componentForm[addressType]) {
				var val = place.address_components[i][componentForm[addressType]];
				document.getElementById(addressType).value = val;
				completeAddress += val;
			}
			document.getElementById("yelpButton").disabled = false;
		}
	}

	// Bias the autocomplete object to the user's geographical location,
	// as supplied by the browser's 'navigator.geolocation' object.
	function geolocate() {
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(function(position) {
				var geolocation = {
					lat: position.coords.latitude,
					lng: position.coords.longitude
				};
				var circle = new google.maps.Circle({
					center: geolocation,
					radius: position.coords.accuracy
				});
				autocomplete.setBounds(circle.getBounds());
			});
		}
	}

	function yelpRequest(){
		// make a GET Request to the Yelp API and output data

		const reqHeaders = new Headers();
		reqHeaders.append("Authorization", "Bearer YELP_API");
		reqHeaders.append("Access-Control-Allow-Origin", "*");

		const init = {
			method: "GET",
			headers: reqHeaders,
			mode: 'cors'
		};

		const corsProxy = "https://cors-anywhere.herokuapp.com/";
		const url = "https://api.yelp.com/v3/businesses/search?term=cake&location="+completeAddress+"&limit=5";

		const req = new Request(corsProxy + url, init);
		fetch(req).then(function(response){
			if (response.ok){
				return response.json();
			}
			throw new Error('Network response was not ok.');
		}).then(function(data){
			cakeStore = data.businesses[0].name;
			document.getElementById("yelpDisplay").textContent = cakeStore;
		}).catch(function(error) {
  			console.log('Problem with fetch operation: ' + error.message);
		});
	}

	function yelpDisplay(){
		// make a request to the Yelp API and then turn button off
		yelpRequest();
		document.getElementById("yelpButton").disabled = true;
	}

	// process yelp data when button is clicked
	yelpButton.addEventListener("click", yelpDisplay);

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=GOOGLE_API&libraries=places&callback=initAutocomplete"
async defer></script>

<!-- code sample from https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform 
under Apache 2.0 License-->